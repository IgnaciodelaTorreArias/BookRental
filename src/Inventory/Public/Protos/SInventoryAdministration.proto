syntax = "proto3";

option csharp_namespace = "Inventory.Public.Services.Administration";

import "Resources/PaginatedResource.proto";
import "Resources/ResourceIdentifier.proto";

package Inventory.Public.Administration;

service SInvenotryAdministration{
    // /administration/books
    // [Authorize(Roles = "acquisitions, operations, admin")]
    rpc GetRecentBooksAdministration (Commons.Messages.Resources.PaginatedResource) returns (Books);
    // /administration/books/{book_id}
    // [Authorize(Roles = "acquisitions, operations, admin")]
    rpc GetBookAdministration (Commons.Messages.Resources.ResourceIdentifier) returns (Book);
	// /administration/books/{book_id}
    // [Authorize(Roles = "acquisitions")]
    // Triggers message `book_created` to message broker
    rpc PostBook (Book) returns (Book);
    // /administration/books/{book_id}
    // [Authorize(Roles = "acquisitions, admin")]
    // Triggers message `book_changed` to message broker
    rpc PutBook (Book) returns (Book);

    // /administration/acquisitions
    // [Authorize(Roles = "acquisitions, operations, admin")]
    rpc GetRecentAcquisitions (Commons.Messages.Resources.PaginatedResource) returns (Acquisitions);
    // /administration/acquisitions/{acquisition_id}
    // [Authorize(Roles = "acquisitions, operations, admin")]
    rpc GetAcquisition (Commons.Messages.Resources.ResourceIdentifier) returns (Acquisition);
    // /administration/acquisitions/{acquisition_id}
    // [Authorize(Roles = "acquisitions")]
    rpc PostAcquisition (Acquisition) returns (Acquisition);
    // /administration/acquisitions/{acquisition_id}
    // [Authorize(Roles = "operations, admin")]
    // Triggers message `book_available` to message broker (when changing status to CONFIRMED)
    rpc PutAcquisition (Acquisition) returns (Acquisition);

    // /stock/acquisition/{acquisition_id}
    // [Authorize(Roles = "acquisitions, operations, admin")]
    rpc GetAcquisitionCopies (Commons.Messages.Resources.PaginatedResource) returns (BookCopies);
    // /stock/books/{book_id}
    // [Authorize(Roles = "acquisitions, operations, admin")]
    rpc GetBookCopy(Commons.Messages.Resources.ResourceIdentifier) returns (BookCopy);
    // /stock/books/{copy_id}
    // [Authorize(Roles = "operations")]
    // Triggers message `book_available` to message broker (when changing status to AVAILABLE)
    rpc PutBookCopy (BookCopy) returns (Void);
}

message Void {}

message Book {
    // Set by DB
    optional uint32 book_id = 1;
    optional string book_name = 2;
    optional string iso_language_code = 3;
    optional string author_name = 4;
    optional uint32 published_date = 5;
    optional string description = 6;
    optional uint32 rental_fee = 7;
    optional bool visible = 8;

    // helps updating published_date to null
    optional bool published_date_unknown = 9;
}

message Books {
    repeated Book books_data = 1;
}

enum AcquisitionStatus {
    UNSPECIFIED_AcquisitionStatus = 0;
    CONFIRMED = 1;
    UNCONFIRMED = 2;
    ERROR = 3;
}

message Acquisition {
    // Set by DB
    optional uint32 acquisition_id = 1;
    // Immutable
    optional uint32 book_id = 2;
    optional uint32 acquisition_price = 3;
    optional uint32 quantity = 4;
    optional uint32 acquisition_date = 5;
    // Set by DB
    optional AcquisitionStatus status = 6;
    // Set by DB
    // Immutable
    optional uint32 copy_id_start = 7;
}

message Acquisitions {
    repeated Acquisition acquisitions_data = 1;
}

enum CopyStatus {
    UNSPECIFIED_CopyStatus = 0;
    AVAILABLE = 1;
    UNAVAILABLE = 2;
    LOST = 3;
    RETIRED = 4;
}

message BookCopy {
    uint32 copy_id = 1;
    // Immutable
    optional uint32 book_id = 2;
    // Immutable
    optional uint32 acquisition_id = 3;
    CopyStatus status = 4;
}

message BookCopies {
    repeated BookCopy copies = 1;
}